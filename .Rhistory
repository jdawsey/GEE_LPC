#Have downloaded 1, 7, 10, 17, 18, 24, 29, 31, 32, 33, 39, 43, and 45 for testing
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
image_st <- clip
st_bandNames <- image_st$bandNames()
meanDict <- image_st$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
means <- ee$Image$constant(meanDict$values(st_bandNames))
centered <- image_st$subtract(means)
stdDevDict <- image_st$reduceRegion(
reducer = ee$Reducer$stdDev(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
stddevs <- ee$Image$constant(stdDevDict$values(st_bandNames))
standardized <- centered$divide(stddevs)
visParam_st <- list(bands <- c('N', 'R', 'G'),
min = -1,
max = 2,
gamma = 1.2
)
#Map$addLayer(standardized, visParams = visParam_st)
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(standardized)
#Map$addLayer(savi)
# adding savi as a band to use
standardized <- standardized$addBands(savi)
# checking was added
#band_names <- standardized$bandNames()
#print(band_names$get(4)$getInfo())
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(standardized)
# adding endvi as a band to use
standardized <- standardized$addBands(endvi)
# checking was added
band_names <- standardized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
gauss <- standardized$add(standardized$convolve(dog)) #changed name from sharpened
### gaussian smoothing
#gaussianKernel <- ee$Kernel$gaussian(
#  radius = 3,
#  units = 'pixels'
#)
#gauss <- sharpened$convolve(gaussianKernel)
#visParamGauss <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 10000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaXMeans(maxClusters = 10, maxIterations = 5, useKD = TRUE) %>% # change clusters depending on imagery ### check accuracies
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 9, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
#classified <- Map$addLayer(result, visParams = visPalette)
#imageryMap <- Map$addLayer(standardized, visParams= visParam_st)
###
drive_image <- ee_image_to_drive(
image = gauss,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
#shp_geo <- shp$geometry()
drive_image <- ee_image_to_drive(
image = result,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
setwd("D:/!!Research/rgee_test/GEE_LPC")
### change the feature collection to your boundary asset location
shp <- eeItemList[[36]] # change per buffer ########### currently standardizing. currently 36
#Have downloaded 1, 7, 10, 17, 18, 24, 29, 30, 31, 32, 33, 39, 43, and 45 for testing
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
image_st <- clip
st_bandNames <- image_st$bandNames()
meanDict <- image_st$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
means <- ee$Image$constant(meanDict$values(st_bandNames))
centered <- image_st$subtract(means)
stdDevDict <- image_st$reduceRegion(
reducer = ee$Reducer$stdDev(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
stddevs <- ee$Image$constant(stdDevDict$values(st_bandNames))
standardized <- centered$divide(stddevs)
visParam_st <- list(bands <- c('N', 'R', 'G'),
min = -1,
max = 2,
gamma = 1.2
)
#Map$addLayer(standardized, visParams = visParam_st)
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(standardized)
#Map$addLayer(savi)
# adding savi as a band to use
standardized <- standardized$addBands(savi)
# checking was added
#band_names <- standardized$bandNames()
#print(band_names$get(4)$getInfo())
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(standardized)
# adding endvi as a band to use
standardized <- standardized$addBands(endvi)
# checking was added
band_names <- standardized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
gauss <- standardized$add(standardized$convolve(dog)) #changed name from sharpened
### gaussian smoothing
#gaussianKernel <- ee$Kernel$gaussian(
#  radius = 3,
#  units = 'pixels'
#)
#gauss <- sharpened$convolve(gaussianKernel)
#visParamGauss <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 10000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaXMeans(maxClusters = 10, maxIterations = 5, useKD = TRUE) %>% # change clusters depending on imagery ### check accuracies
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 9, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
#classified <- Map$addLayer(result, visParams = visPalette)
#imageryMap <- Map$addLayer(standardized, visParams= visParam_st)
###
drive_image <- ee_image_to_drive(
image = gauss,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
#shp_geo <- shp$geometry()
drive_image <- ee_image_to_drive(
image = result,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
### change the feature collection to your boundary asset location
shp <- eeItemList[[5]] # change per buffer ########### currently standardizing. currently 5
#Have downloaded 1, 7, 10, 17, 18, 24, 29, 30, 31, 32, 33, 36, 39, 43, and 45 for testing
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
image_st <- clip
st_bandNames <- image_st$bandNames()
meanDict <- image_st$reduceRegion(
reducer = ee$Reducer$mean(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
means <- ee$Image$constant(meanDict$values(st_bandNames))
centered <- image_st$subtract(means)
stdDevDict <- image_st$reduceRegion(
reducer = ee$Reducer$stdDev(),
geometry = shp,
scale = 1,
maxPixels = 200000000,
bestEffort = TRUE,
tileScale = 16
)
stddevs <- ee$Image$constant(stdDevDict$values(st_bandNames))
standardized <- centered$divide(stddevs)
visParam_st <- list(bands <- c('N', 'R', 'G'),
min = -1,
max = 2,
gamma = 1.2
)
#Map$addLayer(standardized, visParams = visParam_st)
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(standardized)
#Map$addLayer(savi)
# adding savi as a band to use
standardized <- standardized$addBands(savi)
# checking was added
#band_names <- standardized$bandNames()
#print(band_names$get(4)$getInfo())
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(standardized)
# adding endvi as a band to use
standardized <- standardized$addBands(endvi)
# checking was added
band_names <- standardized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
gauss <- standardized$add(standardized$convolve(dog)) #changed name from sharpened
### gaussian smoothing
#gaussianKernel <- ee$Kernel$gaussian(
#  radius = 3,
#  units = 'pixels'
#)
#gauss <- sharpened$convolve(gaussianKernel)
#visParamGauss <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 10000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaXMeans(maxClusters = 10, maxIterations = 5, useKD = TRUE) %>% # change clusters depending on imagery ### check accuracies
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 9, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
#classified <- Map$addLayer(result, visParams = visPalette)
#imageryMap <- Map$addLayer(standardized, visParams= visParam_st)
###
drive_image <- ee_image_to_drive(
image = gauss,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
#shp_geo <- shp$geometry()
drive_image <- ee_image_to_drive(
image = result,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
