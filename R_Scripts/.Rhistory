# Map$addLayer(normalized, visParams = visParamNorm)
###
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(normalized)
Map$addLayer(savi)
# adding savi as a band to use
normalized <- normalized$addBands(savi)
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(normalized)
# adding endvi as a band to use
normalized <- normalized$addBands(endvi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
sharpened <- normalized$add(normalized$convolve(dog))
###
### gaussian smoothing
gaussianKernel <- ee$Kernel$gaussian(
radius = 3,
units = 'pixels'
)
gauss <- sharpened$convolve(gaussianKernel)
###
visParamGauss <- list(bands <- c('R', 'G', 'B'),
min= 0,
max= 255
)
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 5000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaKMeans(8) %>% # change clusters depending on imagery
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 10, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
#classified <- Map$addLayer(result, visParams = visPalette)
#imageryMap <- Map$addLayer(clip, visParams= visParam)
###
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 5000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaKMeans(8) %>% # change clusters depending on imagery
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 10, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
classified <- Map$addLayer(result, visParams = visPalette)
imageryMap <- Map$addLayer(clip, visParams= visParam)
###
### showing the maps
classified | imageryMap
### change the feature collection to your boundary asset location
shp <- eeItemList[[10]] # change per buffer - already ran 10 ---###########havent run 11 yet
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
# Get mean and SD in every band by combining reducers.
stats <- clip$reduceRegion(
reducer = ee$Reducer$mean()$combine(
reducer2 = ee$Reducer$stdDev(),
sharedInputs = TRUE
),
geometry = shp,
scale = 1, # change depending on year
bestEffort = TRUE # Use maxPixels if you care about scale.
)
#print(stats$getInfo())
# Extract means and SDs to images.
meansImage <- stats$toImage()$select('.*_mean')
sdsImage <- stats$toImage()$select('.*_stdDev')
coeffVarImage <- meansImage$divide(sdsImage)
normalized = clip$subtract(coeffVarImage)
######## Visualize if wanted ################
#visParamNorm <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
# Map$addLayer(normalized, visParams = visParamNorm)
###
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(normalized)
# adding endvi as a band to use
normalized <- normalized$addBands(endvi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
sharpened <- normalized$add(normalized$convolve(dog))
###
### gaussian smoothing
gaussianKernel <- ee$Kernel$gaussian(
radius = 3,
units = 'pixels'
)
gauss <- sharpened$convolve(gaussianKernel)
###
visParamGauss <- list(bands <- c('R', 'G', 'B'),
min= 0,
max= 255
)
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
### creating training samples for the unsupervised classification
training <- gauss$sample(
region = shp,
scale = 1, #change depending on year
numPixels = 5000
)
###
### the actual classification function
clusterer <- ee$Clusterer$wekaKMeans(8) %>% # change clusters depending on imagery
ee$Clusterer$train(training)
result <- gauss$cluster(clusterer)
###
### creating a landcover palette to view the result
landcoverPalette <- c(
'#00a944',
'#d6d6d6',
'#c65b8d',
'#000000',
'#ff3434',
'#5bb48f',
'#47f37c',
'#c04848',
'#ded132',
'#5bb48f',
'#0f0077',
'#778bff',
'#8f8f8f',
'#000000',
'#d9a300'
)
visPalette <- list(
min= 0,
max= 7, # change depending on number of clusters
palette = landcoverPalette
)
###
### adding maps to compare
classified <- Map$addLayer(result, visParams = visPalette)
imageryMap <- Map$addLayer(clip, visParams= visParam)
###
### showing the maps
classified | imageryMap
### change the feature collection to your boundary asset location
shp <- eeItemList[[1]] # change per buffer - already ran 10 ---###########havent run 11 yet
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
# Get mean and SD in every band by combining reducers.
stats <- clip$reduceRegion(
reducer = ee$Reducer$mean()$combine(
reducer2 = ee$Reducer$stdDev(),
sharedInputs = TRUE
),
geometry = shp,
scale = 1, # change depending on year
bestEffort = TRUE # Use maxPixels if you care about scale.
)
#print(stats$getInfo())
# Extract means and SDs to images.
meansImage <- stats$toImage()$select('.*_mean')
sdsImage <- stats$toImage()$select('.*_stdDev')
coeffVarImage <- meansImage$divide(sdsImage)
normalized = clip$subtract(coeffVarImage)
######## Visualize if wanted ################
#visParamNorm <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
# Map$addLayer(normalized, visParams = visParamNorm)
###
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(normalized)
#Map$addLayer(savi)
# adding savi as a band to use
normalized <- normalized$addBands(savi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(4)$getInfo())
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(normalized)
# adding endvi as a band to use
normalized <- normalized$addBands(endvi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
sharpened <- normalized$add(normalized$convolve(dog))
###
### gaussian smoothing
gaussianKernel <- ee$Kernel$gaussian(
radius = 3,
units = 'pixels'
)
gauss <- sharpened$convolve(gaussianKernel)
###
visParamGauss <- list(bands <- c('R', 'G', 'B'),
min= 0,
max= 255
)
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
drive_image <- ee_image_to_drive(
image = gauss,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
### change the feature collection to your boundary asset location
shp <- eeItemList[[2]] # change per buffer - already ran 10 ---###########havent run 11 yet
### choose your imagery and the dates for it
year <- ee$ImageCollection('USDA/NAIP/DOQQ') %>%
ee$ImageCollection$filterDate(ee$Date('2016-01-01'),
ee$Date('2016-12-31')) %>%
ee$ImageCollection$filterBounds(shp)
# mosaic the collection into a single image
year <- year$mosaic()
### clipping to shape
clip <- year$clip(shp)
###
### visibility parameters for the color image
visParam <- list(bands <- c('R', 'G', 'B'),
gamma = 1
)
# centering and adding to map to check that it's visualizing properly
#Map$centerObject(shp)
#Map$addLayer(clip, visParams= visParam)
# Get mean and SD in every band by combining reducers.
stats <- clip$reduceRegion(
reducer = ee$Reducer$mean()$combine(
reducer2 = ee$Reducer$stdDev(),
sharedInputs = TRUE
),
geometry = shp,
scale = 1, # change depending on year
bestEffort = TRUE # Use maxPixels if you care about scale.
)
#print(stats$getInfo())
# Extract means and SDs to images.
meansImage <- stats$toImage()$select('.*_mean')
sdsImage <- stats$toImage()$select('.*_stdDev')
coeffVarImage <- meansImage$divide(sdsImage)
normalized = clip$subtract(coeffVarImage)
######## Visualize if wanted ################
#visParamNorm <- list(bands <- c('R', 'G', 'B'),
#  min= 0,
#  max= 255
#  )
# Map$addLayer(normalized, visParams = visParamNorm)
###
rgb_savi <- function(image_given) {
image_bands <- image_given$select(c("R", "N"))
image <- image_bands
savi <- image$expression(
expression = '(1 + 0.6) * (N - R) / (N + R + 0.6)',
opt_map =  list(
'R' = image$select('R'),
'N' = image$select('N')
)
)$rename('savi')
return(savi)
}
savi <- rgb_savi(normalized)
#Map$addLayer(savi)
# adding savi as a band to use
normalized <- normalized$addBands(savi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(4)$getInfo())
rgb_endvi <- function(image_given) {
image_bands <- image_given$select(c("N", "G", "B"))
image <- image_bands
endvi <- image$expression(
expression = '((N + G) - (2 * B)) / ((N + G) + (2 + B))',
opt_map =  list(
'N' = image$select('N'),
'G' = image$select('G'),
'B' = image$select('B')
)
)$rename('endvi')
return(endvi)
}
endvi <- rgb_endvi(normalized)
# adding endvi as a band to use
normalized <- normalized$addBands(endvi)
# checking was added
band_names <- normalized$bandNames()
#print(band_names$get(5)$getInfo())
### DoG sharpening
fat <- ee$Kernel$gaussian(
radius = 3,
sigma = 3,
magnitude = -1.0,
units = 'pixels'
)
skinny <- ee$Kernel$gaussian(
radius = 3,
sigma = 0.5,
units = 'pixels'
)
dog <- fat$add(skinny)
sharpened <- normalized$add(normalized$convolve(dog))
###
### gaussian smoothing
gaussianKernel <- ee$Kernel$gaussian(
radius = 3,
units = 'pixels'
)
gauss <- sharpened$convolve(gaussianKernel)
###
visParamGauss <- list(bands <- c('R', 'G', 'B'),
min= 0,
max= 255
)
### checking that image was smoothed
#Map$addLayer(gauss, visParams = visParamGauss)
drive_image <- ee_image_to_drive(
image = gauss,
description = "export",
folder = "!imagery",
region = shp,
scale = 1,
max = 130000000
)
drive_image$start()
